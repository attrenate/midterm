$color-white: #FFFFFF;
$color-navy: rgb(11, 57, 84);
$color-accent-yellow: rgb(255, 177, 40);
$color-light-gray: rgb(245, 245, 245);
$color-dark-gray: rgb(51, 51, 51);
$shadow-color-light: rgba(0, 0, 0, 0.05);

@mixin flex-display($direction: row, $justify-content: flex-start, $align-items: stretch, $gap: 0) {
    display: flex;
    flex-direction: $direction;
    justify-content: $justify-content;
    align-items: $align-items;
    @if $gap != 0 {
        gap: #{$gap}px;
    }
}

@mixin dimensions($width: auto, $height: auto) {
    @if $width != auto {
        width: #{$width}px;
    }
    @if $height != auto {
        height: #{$height}px;
    }
}

.header-section {
    @include dimensions(1920, 162.13);
    position: relative; // For absolute positioning of direct children if any with layoutMode: NONE
                         // and for context of other absolutely positioned descendants.
    // Assuming root element might be positioned by document flow or other means.
    // x: 0, y: 0 for the root "Header" is typical for canvas origin.
}

.header-container {
    @include dimensions(1920, 162.13);
    @include flex-display(column, flex-start, stretch, 0);
}

.top-bar {
    @include dimensions(1920, 83.13);
    background-color: $color-white;
    @include flex-display(column, flex-start, stretch, 0);
}

.top-bar-content-wrapper {
    @include dimensions(1220, 43.13);
    @include flex-display(row, flex-start, stretch, 0);
    align-self: center; // From constraints: { horizontal: "CENTER" } and parent flex direction
    margin-top: 30px; // From y: 30
                      // x: 350 and constraints.horizontal: "CENTER" implies centering,
                      // width 1220 in 1920 parent, (1920-1220)/2 = 350. So margin auto or align-self works.
}

.logo-area {
    @include dimensions(300, 43.13);
    @include flex-display(row, flex-start, center, 0); // vertical: CENTER
}

.logo-wrapper {
    @include dimensions(300, 43.13);
    @include flex-display(row, flex-start, stretch, 0);
}

.logo-placeholder-rectangle {
    @include dimensions(300, 43.13);
}

.logo-image-container {
    @include dimensions(250, 43.13);
    @include flex-display(column, flex-start, stretch, 0); // vertical: CENTER
    align-self: center;
}

.logo-link-wrapper {
    @include dimensions(240, 43.13);
    @include flex-display(column, flex-start, stretch, 0);
    margin-left: 5px;
}

.main-logo-link {
    @include dimensions(240, 43.13);
    @include flex-display(row, flex-start, stretch, 0);
    flex-grow: 1;
    text-decoration: none;
}

.brand-identity-mark {
    @include dimensions(240, 43.13);
    @include flex-display(column, flex-start, initial, 0); // vertical: MIN
    flex-grow: 1;
}

.brand-identity-mark-elements {
    @include dimensions(240, 43.13);
    @include flex-display(column, flex-start, initial, 0); // vertical: MIN
}

.brand-identity-mark-graphic {
    @include dimensions(240, 43.13);
    position: relative; // layoutMode: NONE
    top: 0.0025px;
    // Vectors inside would be absolutely positioned or part of an SVG structure
}

.vector-art { // Simplified representation for multiple vectors
    position: absolute; // Assuming vectors are positioned within their parent
    // Specific styling for each vector would go here based on its own x,y,width,height,fill
    // Example for the first vector child:
    &:nth-child(1) {
        @include dimensions(15.77, 17.59);
        left: 70.9375px;
        top: 12.5px;
        background-color: $color-navy;
    }
     &:nth-child(2) { // Example for second vector
        @include dimensions(17.44, 17.81);
        left: 89.4928px;
        top: 12.5px;
        background-color: $color-navy;
    }
    // ... and so on for other vectors.
    // For brevity, only showing first two.
    &:nth-child(3) { @include dimensions(16.90, 17.59); left: 111.296875px; top: 12.5px; background-color: $color-navy; }
    &:nth-child(4) { @include dimensions(3.60, 17.59); left: 155.08531188964844px; top: 12.5px; background-color: $color-navy; }
    &:nth-child(5) { @include dimensions(16.59, 17.59); left: 162.05625915527344px; top: 12.5px; background-color: $color-navy; }
    &:nth-child(6) { @include dimensions(17.44, 17.81); left: 181.80718994140625px; top: 12.5px; background-color: $color-navy; }
    &:nth-child(7) { @include dimensions(15.25, 17.59); left: 203.61126708984375px; top: 12.5px; background-color: $color-navy; }
    &:nth-child(8) { @include dimensions(54.38, 43.13); left: 0px; top: 0px; background-color: $color-accent-yellow; } // This is the largest, likely background
    &:nth-child(9) { @include dimensions(1.88, 1.88); left: 4.6875px; top: 16.875px; background-color: $color-accent-yellow; }
    &:nth-child(10) { @include dimensions(1.88, 1.88); left: 46.875px; top: 16.875px; background-color: $color-accent-yellow; }

}


.search-and-user-actions {
    @include dimensions(754.36, 45); // width will be flex-grow:1, this is initial.
    @include flex-display(row, flex-start, center, 0);
    flex-grow: 1;
    margin-top: -0.935px; // y: -0.9349...
}

.search-module-wrapper {
    @include dimensions(754.36, 45); // width from parent, then flex-grow
    @include flex-display(row, flex-start, stretch, 0);
    flex-grow: 1;
}

.search-input-visual {
    @include dimensions(754.36, 45);
}

.search-form-main {
    @include dimensions(620, 45);
    @include flex-display(column, flex-start, stretch, 0); // vertical: CENTER
    align-self: center;
    margin-left: 67.18px; // x: 67.179...
    flex-grow: 1;
}

.search-input-area {
    @include dimensions(610, 45);
    @include flex-display(column, flex-start, stretch, 0);
    margin-left: 5px;
}

.search-field-group {
    @include dimensions(610, 45);
    background-color: $color-light-gray;
    border-radius: 6px;
    @include flex-display(column, flex-start, stretch, 0);
    position: relative; // For absolute positioning of children if needed, or for icon.
}

.search-prompt-wrapper {
    @include dimensions(560, 25);
    @include flex-display(column, flex-start, stretch, 0);
    margin-top: 10px;
    margin-left: 40px;
}

.search-field-hint-text {
    @include dimensions(560, 23);
    color: $color-navy;
    margin-top: 1px;
}

.search-action-symbol {
    // This is a text "Symbol" as per JSON, should be an icon.
    @include dimensions(16.39, 16);
    color: $color-navy;
    position: absolute; // Assuming it's an icon positioned within the input group
    left: 14px;
    top: 12.5px;
}

.user-actions-cluster {
    @include dimensions(165.64, 48);
    @include flex-display(row, flex-start, center, 0);
    margin-top: -2.435px; // y: -2.4349...
}

.action-widget {
    @include flex-display(row, flex-start, stretch, 0); // Default for children items in list
    position: relative; // For badge positioning
    // Each item in JSON (cart, wishlist, profile) has its own dimensions & layout
}

.cart-overview {
    @include dimensions(165.64, 48); // This is for the whole container, its children are laid out HORIZONTALLY
                                    // but the JSON shows children of user-actions-cluster as items
                                    // let's assume this is one item and its internal structure is from JSON
    // The parent .user-actions-cluster is HORIZONTAL. Cart itself.
    // Children of cart-overview are: cart-icon-zone, cart-items-badge, cart-financial-summary
    // Their internal layout needs to be defined. The JSON structure provided implies nested frames.
    // The "Container" with ID 1:2012 has width 165.64 and layoutMode HORIZONTAL
    // Its children are 1:2013 (Rectangle), 1:2014 (Container for icon+badge), 1:2028 (Container for text)
    // This is becoming very complex to map directly.
    // Let's simplify: cart-overview will be a flex container for its direct parts.
    @include flex-display(row, space-between, center, 5px); // A guess for layout
}

.cart-icon-zone { // This is Margin in JSON
    @include dimensions(45, 20.98);
    @include flex-display(column, flex-start, initial, 0); // vertical: MIN
    margin-left: 5px;
    margin-top: 13.51px;
}

.cart-icon-presentation {
    @include dimensions(20, 20.98);
    @include flex-display(row, center, center, 0); // horizontal: CENTER, vertical: CENTER
}
.cart-icon-graphic-element { // furniturestore-cart.svg
    @include dimensions(20, 20.98);
    @include flex-display(column, center, center, 0);
    // Contains vector-art elements for the icon
    .icon-vector-element {
      background-color: $color-navy;
      // Specifics for paths would go here
       &:nth-child(1) { @include dimensions(20, 20.99); } // Approximated from SVG path
       &:nth-child(2) { @include dimensions(10.12, 1.98); position:absolute; top: 8.89px; left:4.94px;}
    }
}


.notification-badge {
    @include dimensions(18.08, 17);
    border-radius: 18px;
    @include flex-display(column, center, center, 0); // To center the text
    position: absolute; // Badges are usually overlaid
    top: -9px; // from JSON y: -9 (relative to its positioned slot)
    left: 13px; // from JSON x: 13
}
.cart-items-badge {
    background-color: $color-dark-gray;
}
.wishlist-items-badge {
     background-color: $color-dark-gray;
}

.badge-count-figure {
    color: $color-white;
    // font-size, font-weight would be styled here.
    // Dimensions from JSON text: width 7, height 11.
    @include dimensions(7,11);
    margin-left: 5.53px;
    margin-top: 3px;
}

.cart-financial-summary { // Container for $0.00
    @include dimensions(45.64, 48);
    @include flex-display(column, center, initial, 0); // vertical: MIN
}
.cart-total-value {
    color: $color-navy;
    @include dimensions(45.64, 48); // Full height of parent
    display: flex;
    align-items: center; // Vertically center text if desired
}

.wishlist-overview { // Item
    @include flex-display(row, space-between, center, 5px); // Guess
    position: relative;
}
.wishlist-icon-zone { // Margin
    @include dimensions(30, 18.27);
    @include flex-display(column, flex-start, initial, 0);
    margin-left: 5px;
}
.wishlist-icon-presentation { // Container
    @include dimensions(20, 18.27);
     @include flex-display(column, center, center, 0);
}
.wishlist-icon-graphic-element { // furniturestore-wishlist.svg
    @include dimensions(20, 18.27);
     @include flex-display(column, center, center, 0);
    .icon-vector-element {
        background-color: $color-navy;
        &:nth-child(1) { @include dimensions(20, 18.27); }
    }
}

.profile-overview {
    @include flex-display(row, space-between, center, 5px); // Guess
}
.profile-icon-zone {
    @include dimensions(35, 20);
    @include flex-display(column, flex-start, initial, 0);
    margin-left: 10px;
}
.profile-icon-presentation {
    @include dimensions(20, 20);
    @include flex-display(column, center, center, 0);
}
.profile-icon-graphic-element { // furniturestore-user.svg
    @include dimensions(20, 20);
    @include flex-display(column, center, center, 0);
     .icon-vector-element {
        background-color: $color-navy;
        &:nth-child(1) { @include dimensions(12.35, 12.35); left:3.95px; top:0px; position:absolute;}
        &:nth-child(2) { @include dimensions(20, 9.63); left:0px; top:10.37px; position:absolute;}
    }
}


.navigation-bar-wrapper {
    @include dimensions(1920, 79);
    background-color: $color-white;
    box-shadow: 0px 8px 8px 0px $shadow-color-light;
    @include flex-display(column, flex-start, stretch, 0);
}

.navigation-content-area {
    @include dimensions(1220, 79);
    @include flex-display(row, flex-start, stretch, 0);
    align-self: center; // horizontal: "CENTER"
}

.primary-navigation-links { // Container for List
    @include dimensions(1220, 79); // Width from parent, then flex-grow
    @include flex-display(row, flex-start, initial, 0); // MIN for List child
    flex-grow: 1;
}

.main-navigation-menu { // List
    @include dimensions(1050, 79);
    @include flex-display(row, flex-start, stretch, 0);
    padding: 0;
    margin: 0;
    list-style: none;
}

.navigation-menu-item {
    // Dimensions are for Item: W 175.2, H 39.5 - but this is for a single item,
    // the list itself is 1050 wide. The items will share this space.
    // For now, set dimensions as per the first item, but in reality, this might be dynamic.
    // height: 39.5px; align-self: center; // From item H and parent vertical stretch/center
    @include flex-display(row, flex-start, stretch, 0); // Children are Link and Divider
    align-items: center; // To vertically center link and divider within 79px bar
}

.navigation-menu-link {
    @include dimensions(auto, 39.5); // Width can be auto, height as specified
    @include flex-display(row, center, center, 0); // To center content within the link
    flex-grow: 1; // Allow link to take space
    padding: 0 20px; // Example padding
    text-decoration: none;
    position: relative; // For .link-highlight-visual
}

.link-highlight-visual {
    // This rectangle has no fill in JSON, might be for hover/active state background
    @include dimensions(100%, 100%); // Cover the link
    position: absolute;
    left: 0;
    top: 0;
    z-index: -1;
}

.link-text-container { // Container for Chairs text
    // Dimensions from text: W 52, H 14.
    // Centered by parent .navigation-menu-link
    @include flex-display(column, center, center, 0);
    margin-top:33px; // y:33 from item, if item is 39.5 high, this is odd. Assuming it's margin inside link.
    margin-left: 51.19px; // x: 51.19
}

.link-text-label {
    color: $color-navy;
    font-weight: 500; // Typical for nav links
}

.dropdown-arrow-area { // Margin for Symbol
    @include dimensions(22, 14);
    @include flex-display(column, center, center, 0);
    margin-left: 5px; // Spacing from text
    margin-top: 8px; // y:8
}

.dropdown-arrow-symbol {
    color: $color-navy;
}

.menu-item-separator {
    @include dimensions(1, 39.5);
    background-color: $color-light-gray;
    align-self: center; // Vertically center the divider
}

.special-offers-highlight { // Container for sales link
    @include dimensions(170, 79);
    @include flex-display(column, center, center, 0); // To center badge
}

.current-sales-badge { // Background for sales link
    @include dimensions(170, 79);
    background-color: $color-accent-yellow;
    @include flex-display(column, center, center, 0); // Center the link
}

.sales-navigation-link {
    @include dimensions(170, 54);
    @include flex-display(column, center, center, 0);
    text-decoration: none;
    margin-top:15px;
}

.sales-link-label-wrapper { // Margin
    @include dimensions(68, 30);
    @include flex-display(column, center, center, 0);
    margin-left: 51px;
}

.sales-link-label-inner { // Container
    @include dimensions(68, 20);
    @include flex-display(column, center, center, 0);
}

.sales-text-emphasis {
    color: $color-white;
    font-weight: bold;
    @include dimensions(45,24);
    margin-left: 62.5px;
}

// SCSS for other nav items would follow similar pattern for .link-text-label
// and .dropdown-arrow-symbol if present.
// For brevity, I've focused on the first item and the general structure.
// The widths of menu items would likely be distributed or set individually.
// The provided JSON shows variable widths for items based on their text content's container.
// e.g., Beds item: Container 1:2077 -> width 158.3
// I will apply specific widths to the .navigation-menu-item > .navigation-menu-link > .link-text-container
// For the subsequent items:
.main-navigation-menu > .navigation-menu-item:nth-child(2) {
    .link-text-container { @include dimensions(35, 14); margin-left: 51.19px; margin-top:33px; } // Beds
}
.main-navigation-menu > .navigation-menu-item:nth-child(3) {
    .link-text-container { @include dimensions(49, 14); margin-left: 51.19px; margin-top:33px; } // Sofas
}
// ... and so on for other menu items based on their JSON "name" and "width"